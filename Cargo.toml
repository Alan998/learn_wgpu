[package]
name = "learn_wgpu"
version = "0.1.0"
edition = "2024"

[dependencies]
anyhow = "1.0"
winit = { version = "0.30", features = ["android-native-activity"] }
env_logger = "0.10"
log = "0.4"
wgpu = "25.0"
pollster = "0.3"

# Add support for the web
# This tells Cargo that we want to allow our crate to build a native Rust static library (rlib)
# and a C/C++ compatible library (cdylib).
# rlib is for running wgpu in a desktop environment.
# cdylib is for creating the Web Assembly that the browser will run.
[lib]
crate-type = ["cdylib", "rlib"]

#[dependencies]
# other regular dependencies...

[target.'cfg(target_arch = "wasm32")'.dependencies]
# Configures the panic! macro to send errors to the javascript console.
console_error_panic_hook = "0.1.6"

# Sends logs of a particular level to the javascript console.
console_log = "1.0"

# Enable WebGL feature since some browser does not support WebGPU yet.
wgpu = { version = "25.0", features = ["webgl"]}

# Generate boilerplate code that will tell the browser how to use our crate.
# It also allows us to expose methods in Rust that can be used in JavaScript and vice-versa.
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4.30"

# Provides many methods and structures available in a normal javascript application.
web-sys = { version = "0.3", features = [
    "Document",
    "Window",
    "Element",
]}

[package.metadata.wasm-pack.profile.release]
wasm-opt = ["-O", "--enable-bulk-memory"]
